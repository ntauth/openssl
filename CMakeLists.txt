# Based on original work by David Manura
# Copyright (C) 2007-2012 LuaDist.
# Copyright (C) 2013 Brian Sidebotham

# Redistribution and use of this file is allowed according to the terms of the
# MIT license.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# LLVM Bitcode Build
option(LLVM_BITCODE_ONLY "Generate LLVM bitcode only" OFF)

if (LLVM_BITCODE_ONLY)
  message(STATUS "Configuring build for LLVM bitcode")

  if (NOT DEFINED CMAKE_C_COMPILER)
    set(CMAKE_C_COMPILER "clang")
  endif()
  if (NOT DEFINED CMAKE_CXX_COMPILER)
    set(CMAKE_CXX_COMPILER "clang++")
  endif()
  if (NOT DEFINED CMAKE_LINKER)
    set(CMAKE_LINKER "llvm-link")
  endif()

  set(CMAKE_C_LINK_EXECUTABLE   "")
  set(CMAKE_CXX_LINK_EXECUTABLE "")
  
  set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_LINKER> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET>")
  set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_LINKER> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET>")

  SET(CMAKE_C_ARCHIVE_FINISH   "")
  SET(CMAKE_CXX_ARCHIVE_FINISH "")

  add_compile_options(-emit-llvm -c)
endif()

project( openssl )
cmake_minimum_required( VERSION 2.8.3 )

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
option(WITH_APPS "Build applications" OFF)

set( VERSION_MAJOR 1  )
set( VERSION_MINOR 0  )
set( VERSION_PATCH 2k )

set( VERSION_STRING ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH} )
set( LIB_VERSION ${VERSION_MAJOR}.${VERSION_MINOR} )
set( LIB_SOVERSION ${VERSION_MAJOR}.${VERSION_MINOR} )

include_directories ( BEFORE SYSTEM
    ${CMAKE_CURRENT_BINARY_DIR}/crypto
    ${CMAKE_CURRENT_BINARY_DIR}/ssl
    ${CMAKE_CURRENT_BINARY_DIR}/include
    crypto . )

add_definitions( -DOPENSSL_NO_ASM )

if(MSVC)
  include(MSVCRuntime)
  configure_msvc_runtime()
endif()

if(WIN32)
  set(CMAKE_SHARED_LIBRARY_PREFIX "lib")
  set(CMAKE_STATIC_LIBRARY_PREFIX "lib")
endif()

if ( APPLE )
  set( CMAKE_MACOSX_RPATH ON )
  add_definitions( -DOPENSSL_SYSNAME_MACOSX )
endif()

if( WIN32 AND NOT CYGWIN )
  add_definitions( -DOPENSSL_SYSNAME_WIN32 )
  add_definitions( -DWIN32_LEAN_AND_MEAN )
  add_definitions( -D_CRT_SECURE_NO_WARNINGS )

  if (BUILD_SHARED_LIBS)
    # avoid conflict: ocsp.h and wincrypt.h
    add_definitions( -D_WINDLL )
  endif()
endif()

if( MINGW )
  set( CMAKE_SHARED_LINKER_FLAGS "-Wl,--export-all" )
endif()

if ( ANDROID )
  set ( BUILD_SHARED_LIBS ON )
elseif ( IOS )
  set ( BUILD_SHARED_LIBS OFF )
endif()

add_subdirectory( crypto )
add_subdirectory( ssl )

if( WITH_APPS AND NOT ANDROID AND NOT IOS )
  add_subdirectory( apps )
endif()

file ( COPY e_os2.h DESTINATION ${PROJECT_BINARY_DIR}/include/openssl )

install( DIRECTORY ${PROJECT_BINARY_DIR}/include/openssl DESTINATION include )

#install( FILES tools/c_hash tools/c_info tools/c_issuer tools/c_name tools/#c_rehash
#    FAQ LICENSE PROBLEMS README README.ASN1 README.ENGINE
#    DESTINATION share/openssl )

install( DIRECTORY doc DESTINATION share )

# Generate the package target
set( CPACK_GENERATOR ZIP TGZ )
set( CPACK_PACKAGE_NAME "openssl-cmake" )
set( CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR} )
set( CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR} )
set( CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH} )

include( CPack )

